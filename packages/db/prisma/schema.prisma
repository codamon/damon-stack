// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js 认证系统所需的数据模型

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?   // 用于凭据认证
  role             String    @default("user")
  status           String    @default("active")
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  
  // CMS 相关关联
  posts    Post[]    // 用户作为作者的文章

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// CMS 内容管理系统相关模型

// 文章状态枚举
enum PostStatus {
  DRAFT        // 草稿
  PUBLISHED    // 已发布  
  ARCHIVED     // 已归档
  SCHEDULED    // 定时发布
}

model Category {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String?  @db.Text
  parentId    String?  @db.VarChar(255)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-referential relationship for hierarchical categories
  parent   Category?  @relation("CategoryTree", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("CategoryTree")

  // 与文章的关联关系
  posts Post[]

  @@map("cms_categories")
}

// 文章模型
model Post {
  id          String   @id @default(cuid())
  
  // 基础信息
  title       String   // 文章标题
  slug        String   @unique // URL 友好的标识符
  content     String   @db.Text // 富文本 HTML 内容
  excerpt     String?  // 文章摘要/简介
  
  // 媒体信息
  coverImage  String?  // 封面图片 URL
  
  // 状态管理
  status      PostStatus @default(DRAFT) // 发布状态
  
  // SEO 相关
  metaTitle       String? // SEO 标题
  metaDescription String? // SEO 描述
  keywords        String? // 关键词，逗号分隔
  
  // 排序和组织
  order       Int      @default(0) // 排序权重
  featured    Boolean  @default(false) // 是否精选
  
  // 统计信息
  viewCount   Int      @default(0) // 浏览次数
  likeCount   Int      @default(0) // 点赞次数
  
  // 发布时间
  publishedAt DateTime? // 发布时间
  scheduledAt DateTime? // 定时发布时间
  
  // 关联关系
  authorId    String   // 作者 ID
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categoryId  String?  // 分类 ID（可选）
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // 标签关联（多对多）
  tags        PostTag[]
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 数据库索引
  @@index([status])
  @@index([authorId])
  @@index([categoryId])
  @@index([publishedAt])
  @@index([slug])
  @@index([featured])
  @@map("cms_posts")
}

// 标签模型
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique // 标签名称
  slug        String   @unique // URL 友好标识符
  description String?  // 标签描述
  color       String?  // 标签颜色
  
  // 关联关系
  posts       PostTag[]
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("cms_tags")
}

// 文章-标签关联表（多对多）
model PostTag {
  id     String @id @default(cuid())
  
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  tagId  String  
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  // 时间戳
  createdAt DateTime @default(now())
  
  // 确保同一篇文章不能重复添加同一个标签
  @@unique([postId, tagId])
  @@map("cms_post_tags")
}
